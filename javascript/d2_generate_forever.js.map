{"version":3,"file":"d2_generate_forever.js","sources":["../src/js/D2GFCounter.ts","../src/js/D2GFGenerateForever.ts","../src/js/index.ts"],"sourcesContent":["/* global gradioApp */\nimport { TType } from './types';\n\ndeclare var gradioApp: any;\n\nclass D2GFCounter {\n    type: TType;\n    countArea: HTMLElement | undefined;\n    batchArea: HTMLElement | undefined;\n    batchCountInput: HTMLInputElement | undefined;\n    count = 0;\n\n    constructor(type: TType) {\n        this.type = type;\n    }\n\n    createContainer(): HTMLElement {\n        const app = gradioApp();\n\n        const container = document.createElement('span');\n        container.id = `d2gf-count-container_${this.type}`;\n\n        this.countArea = document.createElement('span');\n        this.countArea.classList.add('d2gf-count-area');\n\n        this.batchArea = document.createElement('span');\n        container.appendChild(this.countArea);\n        container.appendChild(this.batchArea);\n\n        // バッチカウントエレメント\n        this.batchCountInput = app.querySelector(`#${this.type}_batch_count input`) as HTMLInputElement;\n\n        return container;\n    }\n\n    /**\n     * webui の batch count の値を取得して返す\n     * 表示欄も更新する\n     * 1だったら∞マークにする\n     * @returns\n     */\n    getBatchCount(): number {\n        const batchCountInput = this.batchCountInput as HTMLInputElement;\n        if (this.batchArea) {\n            this.batchArea.textContent = `${batchCountInput.value === '1' ? '∞' : batchCountInput.value}`;\n        }\n        return parseInt(batchCountInput.value);\n    }\n\n    resetCount() {\n        this.$_setCount(0);\n    }\n\n    addCount() {\n        this.$_setCount(this.count + 1);\n    }\n\n    /**\n     * 生成カウンタをセット\n     */\n    private $_setCount(count: number) {\n        this.count = count;\n\n        if (this.countArea) {\n            this.countArea.textContent = `${count}`;\n        }\n    }\n}\n\nexport { D2GFCounter };\n","/* global gradioApp */\nimport { D2GFCounter } from './D2GFCounter';\nimport { TType, TStateAttr, TStateVal, TStateDict, TOption } from './types';\n\ndeclare var gradioApp: any;\ndeclare var opts: TOption;\n\nconst SEED_INTERVAL = 1000;\n\nclass D2GFGenerateForever {\n    foreverBtn: HTMLButtonElement | undefined;\n    cancelBtn: HTMLButtonElement | undefined;\n\n    type: TType;\n    state: TStateDict;\n    counter: D2GFCounter;\n    generateCount = 0;\n\n    /**\n     * コンストラクタ\n     * @param {*} type txt2img / img2img\n     */\n    constructor(type: TType) {\n        this.type = type;\n        this.state = {\n            forever: 'stop',\n            seed: 'random',\n        };\n        this.generateCount = 0;\n        this.counter = new D2GFCounter(type);\n    }\n\n    /**\n     * 初期化\n     */\n    init() {\n        this.createControl();\n    }\n\n    /**\n     * コントローラー準備\n     */\n    createControl() {\n        const app = gradioApp();\n        this.foreverBtn = app.querySelector(`#d2gf-forever-btn_${this.type}`) as HTMLButtonElement;\n        this.foreverBtn.addEventListener('click', () => {\n            this.startGenerateForever();\n        });\n\n        this.cancelBtn = app.querySelector(`#d2gf-cancel-btn_${this.type}`) as HTMLButtonElement;\n        this.cancelBtn.addEventListener('click', () => {\n            this.cancelForever();\n        });\n\n        // カウント表示エリア\n        const countContainer = this.counter.createContainer();\n        this.counter.resetCount();\n\n        // 機能拡張エリアの枠を生成ボタンの下に移動しちゃう\n        const actionColumn = app.getElementById(`${this.type}_actions_column`) as HTMLElement;\n        const generateBox = app.getElementById(`${this.type}_generate_box`) as HTMLButtonElement;\n        const container = document.createElement('div');\n        container.classList.add('d2gf-action-container');\n        container.appendChild(this.foreverBtn);\n        container.appendChild(this.cancelBtn);\n        container.appendChild(countContainer);\n        actionColumn.insertBefore(container, generateBox.nextSibling);\n\n        // シード入力欄\n        const seedInput = app.querySelector(`#${this.type}_seed input`) as HTMLInputElement;\n\n        // シードとバッチカウントを定期的にチェック\n        setInterval(() => {\n            this.changeState('seed', seedInput.value !== '-1' ? 'fix' : 'random');\n            this.counter.getBatchCount();\n        }, SEED_INTERVAL);\n    }\n\n    /**\n     * 状態変更\n     */\n    changeState(stateAttr: TStateAttr, state: TStateVal) {\n        const foreverBtn = this.foreverBtn as HTMLButtonElement;\n        const cancelBtn = this.cancelBtn as HTMLButtonElement;\n\n        this.state[stateAttr] = state;\n        foreverBtn.setAttribute(`data-${stateAttr}`, state);\n        cancelBtn.setAttribute(`data-${stateAttr}`, state);\n    }\n\n    /**\n     * 無限生成停止\n     */\n    cancelForever() {\n        this.changeState('forever', 'stop');\n    }\n\n    /**\n     * 無限生成開始\n     */\n    startGenerateForever() {\n        this.counter.resetCount();\n        this.changeState('forever', 'forever');\n        this.generateForever();\n    }\n\n    /**\n     * 無限生成\n     */\n    generateForever() {\n        const interruptBtn = gradioApp().querySelector(`#${this.type}_interrupt`) as HTMLButtonElement;\n        const generateBtn = gradioApp().querySelector(`#${this.type}_generate`) as HTMLButtonElement;\n\n        // 中止ボタンが非表示の時だけ押せる\n        if (interruptBtn.offsetParent === null && this.state.forever === 'forever') {\n            generateBtn.click();\n            this.counter.addCount();\n        }\n\n        if (this.counter.getBatchCount() > 1 && this.counter.count >= this.counter.getBatchCount()) {\n            // 指定数に達したら終了\n            this.cancelForever();\n        } else if (this.state.forever === 'forever') {\n            // ランダム時間待機して再実行\n            const waitBase = parseInt(opts.d2_gs_wait_base);\n            const waitRange = parseInt(opts.d2_gs_wait_range);\n            const waitTime = (Math.random() * waitRange + waitBase) * 1000;\n            setTimeout(() => {\n                this.generateForever();\n            }, waitTime);\n        }\n    }\n}\n\nexport { D2GFGenerateForever };\n","declare var onUiLoaded: any;\n\nimport { D2GFGenerateForever } from './D2GFGenerateForever';\n\n/////////////////////////////\n/////////////////////////////\n// UI表示したら作成\nonUiLoaded(() => {\n    const d2gf_t2i = new D2GFGenerateForever('txt2img');\n    const d2gf_i2i = new D2GFGenerateForever('img2img');\n\n    d2gf_t2i.init();\n    d2gf_i2i.init();\n});\n"],"names":[],"mappings":"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"}